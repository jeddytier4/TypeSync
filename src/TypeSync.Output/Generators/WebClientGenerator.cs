using System.Text;
using log4net;
using TypeSync.Common.Utilities;
using TypeSync.Models.Common;
using TypeSync.Models.TypeScript;

namespace TypeSync.Output.Generators
{
    public class WebClientGenerator : GeneratorBase
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(WebClientGenerator));

        public string GenerateService(TypeScriptServiceModel serviceModel)
        {
            var sb = new StringBuilder();

            sb.Append(AutogeneratedHeader_Compact());

            // angular imports
            sb.AppendLine("import { Injectable } from '@angular/core';");
            sb.AppendLine("import { Headers, Http, Response } from '@angular/http';");
            sb.AppendLine();

            // other imports
            sb.AppendLine("import 'rxjs/add/operator/toPromise';");
            sb.AppendLine();

            // dependencies
            sb.AppendLine();

            // mark for dependency injection
            sb.AppendLine("@Injectable()");

            // class declaration
            sb.AppendLine("export class " + serviceModel.Name + "Service {");
            sb.AppendLine();

            // route prefix
            sb.AppendLine("\t" + $"private baseUrl = '{serviceModel.RoutePrefix}';");
            sb.AppendLine();

            // constructor
            sb.AppendLine("\t" + "constructor(private http: Http) { }");
            sb.AppendLine();

            foreach (var func in serviceModel.Functions)
            {
                sb.AppendLine("\t" + NameCaseConverter.ToCamelCase(func.Name) + "(): Promise<Response> {");
                sb.AppendLine("\t\t" + $"return this.http.{MapHttpMethod(func.HttpMethod)}(this.baseUrl)");
                sb.AppendLine("\t\t\t" + ".toPromise()");
                sb.AppendLine("\t\t\t" + ".then(response => response)");
                sb.AppendLine("\t\t\t" + ".catch(this.handleError);");
                sb.AppendLine("\t" + "}");

                sb.AppendLine();
            }


            // error handler
            sb.AppendLine("\t" + "private handleError(error: any): Promise<any> {");
            sb.AppendLine("\t\t" + "return Promise.reject(error.message || error);");
            sb.AppendLine("\t" + "}");

            sb.AppendLine("}");

            return sb.ToString();
        }

        private string MapHttpMethod(HttpMethod httpMethod)
        {
            switch (httpMethod)
            {
                case HttpMethod.Get:
                    return "get";
                case HttpMethod.Post:
                    return "post";
                case HttpMethod.Put:
                    return "put";
                case HttpMethod.Patch:
                    return "patch";
                case HttpMethod.Delete:
                    return "delete";
                default:
                    return "get";
            }
        }
    }
}
